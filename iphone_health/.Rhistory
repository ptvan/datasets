}
pl <- list()
for (i in 1:length(gl)){
x <- filterRows(gl[[i]], 0.35)
anno <- subset(meta, SubjectID %in% gsub("p","",colnames(x)))
anno <- unique(anno[,c("SubjectID", "Progressor","Sex","VaccinatedWithBCG")])
anno$SubjectID <- paste0("p",anno$SubjectID)
rows <- anno$SubjectID
rownames(anno) <- rows
anno <- anno[,c("Progressor","Sex","VaccinatedWithBCG")]
pl[[i]] <- pheatmap(x
, fontsize=6
, main=names(gl)[i]
, annotation_col=anno)
png(paste0("Tuberculomics_wb_RNASeq_normCounts_GSVA_BTM_", names(gl)[i], ".png"), width=1200, height=900, res=150)
print(pl[[i]])
dev.off()
}
pl <- list()
for (i in 1:length(gl)){
x <- filterRows(gl[[i]], 0.4)
anno <- subset(meta, SubjectID %in% gsub("p","",colnames(x)))
anno <- unique(anno[,c("SubjectID", "Progressor","Sex","VaccinatedWithBCG")])
anno$SubjectID <- paste0("p",anno$SubjectID)
rows <- anno$SubjectID
rownames(anno) <- rows
anno <- anno[,c("Progressor","Sex","VaccinatedWithBCG")]
pl[[i]] <- pheatmap(x
, fontsize=6
, main=names(gl)[i]
, annotation_col=anno)
png(paste0("Tuberculomics_wb_RNASeq_normCounts_GSVA_BTM_", names(gl)[i], ".png"), width=1200, height=900, res=150)
print(pl[[i]])
dev.off()
}
pl <- list()
for (i in 1:length(gl)){
x <- filterRows(gl[[i]], 0.35)
anno <- subset(meta, SubjectID %in% gsub("p","",colnames(x)))
anno <- unique(anno[,c("SubjectID", "Progressor","Sex","VaccinatedWithBCG")])
anno$SubjectID <- paste0("p",anno$SubjectID)
rows <- anno$SubjectID
rownames(anno) <- rows
anno <- anno[,c("Progressor","Sex","VaccinatedWithBCG")]
pl[[i]] <- pheatmap(x
, fontsize=6
, main=names(gl)[i]
, annotation_col=anno)
png(paste0("Tuberculomics_wb_RNASeq_normCounts_GSVA_BTM_", names(gl)[i], ".png"), width=1200, height=900, res=150)
print(pl[[i]])
dev.off()
}
?adjacencyMatrix
library(WGCNA)
?adjacency
library(GSVA)
library(TuberculomicsCompendium)
library(dplyr)
library(reshape2)
library(tidyr)
library(GSEABase)
library(limma)
library(pheatmap)
sessionInfo()
install.packages("refGenome")
rnorm()
rnorm(100)
org.Hs.eg.db
?org.Hs.eg.db
columns(org.Hs.eg.db)
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
org.Hs.eg.db
help('select')
keys(org.Hs.eg)
keys(org.Hs.eg.db)
keyunis <- head( keys(hgu95av2.db, keytype="UNIGENE") )
org.Hs.egSYMBOL
lookUp('3815', 'org.Hs.eg', 'SYMBOL')
library(annotate)
lookUp('3815', 'org.Hs.eg', 'SYMBOL')
lookUp(1:20000, 'org.Hs.eg', 'SYMBOL')
lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL')
names(lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL') )
lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL')
unlist(lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL'))
names(unlist(lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL')) )
unlist(lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL'))
genes <- unlist(lookUp(as.character(1:20000), 'org.Hs.eg', 'SYMBOL'))
names(genes) <- null
names(genes) <- NULL
genes
genes <- unlist(lookUp(as.character(1:30000), 'org.Hs.eg', 'SYMBOL'))
names(genes) <- NULL
genes
genes[!is.na(genes)]
genes <- unlist(lookUp(as.character(1:30000), 'org.Hs.eg', 'SYMBOL'))
genes <- genes[!is.na(genes)]
names(genes) <- NULL
genes
1:50
library(stringr)
str_pad( paste0("p", 1:50), left, pad="0")
str_pad( paste0("p", 1:50), "left", pad="0")
paste0("p", 1:50)
str_pad( 1:50, "left", pad="0")
str_pad( as.characters(1:50), "left", pad="0")
str_pad( as.character(1:50), "left", pad="0")
as.character(1:50)
str_pad(as.character(1:50), 3, "left", "0")
ptids <- str_pad(as.character(1:50), 3, "left", "0")
ptids
# generate some dummy subjects
ptids <- paste0("p",str_pad(as.character(1:50), 3, "left", "0"))
ptids
?data.frame
uniform
runif
sample(1:1e6)
sample(1:1e6, length(genes)*length(ptids))
as.dataframe(sample(1:1e6, length(genes)*length(ptids)))
?matrix
as.dataframe(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids))
matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids))
dim(matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids)))
genes <- unlist(lookUp(as.character(1:50000), 'org.Hs.eg', 'SYMBOL'))
genes <- genes[!is.na(genes)]
names(genes) <- NULL
dim(matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids))
)
length(genes)
genes <- unlist(lookUp(as.character(1:50000), 'org.Hs.eg', 'SYMBOL'))
genes
genes <- unlist(lookUp(as.character(1:50000), 'org.Hs.eg', 'SYMBOL'))
genes <- genes[!is.na(genes)]
names(genes) <- NULL
counts <- matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids))
head(counts)
counts <- matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids)*2)
dim(counts)
ptids
c(paste0(ptids,"_MEDIA"), paste0(ptids,"_STIM"))
colnames(counts) <- c(paste0(ptids,"_MEDIA"), paste0(ptids,"_STIM"))
head(counts)
rownames(counts) <- genes
counts
ptids
samples <- c(paste0(ptids,"_MEDIA"), paste0(ptids,"_STIM"))
samples
rep(c("M","F"), length(samples)/2)
anno <- cbind(samples, rep(c("M","F"), length(samples)/2))
anno
class(anno)
# make up metadata/covariates
anno <- as.data.frame(cbind(samples, rep(c("M","F"), length(samples)/2)))
anno
colnames(anno) <- c("sample", "gender")
head(anno)
anno$ptid <- gsub("_MEDIA|_STIM", "", anno$sample)
anno
anno$stim <- gsub("p[0-9]{3}_", "", anno$sample)
head(anno)
dim(anno)
anno$vaccStatus <- rep(c("Y","N","N","Y","UNKNOWN"), nrow(anno)/5)
anno
rep(c("Y","N","N","Y","UNKNOWN"), nrow(anno)/5)
sample(rep(c("Y","N","N","Y","UNKNOWN"), nrow(anno)/5))
anno$vaccStatus <- sample(rep(c("Y","N","N","Y","UNKNOWN"), nrow(anno)/5))
anno
sample(5:60, 100)
?sample
sample(c(5:60), 100)
sample(100, c(5:60))
sample(c(5:60))
sample(c(5:60), 1)
sample(c(5:60), 100)
sample(c(5:60), 100, replace=TRUE)
# at least *some* of our covariates aren't completely confounded
anno$age <- sample(c(5:60), 100, replace=TRUE)
anno
normy <- calcNormFactors(dat)
library(limma)
library(edgeR)
mmatrix <- model.matrix(~gender+vaccStatus, data=anno)
mmatrix
normy <- calcNormFactors(dat)
libNorm <- colSums(exprs(dat))*normy
dat
dat <- ExpressionSet(assayData=as.matrix(counts))
rownames(counts)
genes <- unlist(lookUp(as.character(1:50000), 'org.Hs.eg', 'SYMBOL'))
genes <- unique(genes[!is.na(genes)])
names(genes) <- NULL
genes
sample(genes)
genes <- unlist(lookUp(as.character(1:50000), 'org.Hs.eg', 'SYMBOL'))
genes <- sample(unique(genes[!is.na(genes)]))
names(genes) <- NULL
counts <- matrix(sample(1:1e6, length(genes)*length(ptids)), nrow=length(genes), ncol=length(ptids)*2)
dat <- ExpressionSet(assayData=as.matrix(counts))
dat
normy <- calcNormFactors(dat)
libNorm <- colSums(exprs(dat))*normy
v <- voom(exprs(dat), design=mmatrix, plot=FALSE, lib.size=libNorm)
colvac <- anno$vaccStatus
colvac
primes <- function(n){
vec <- 2:n
i <- 1
while (vec[i] <= sqrt(n)){
vec <-  vec[vec %% vec[i] != 0 | vec == vec[i]]
i <- i+1
}
return(vec)
}
primes(100)
vec = 2:10
i = 1
vec %% vec[i]
vec == vec[i]
setwd("working/datasets/iphone_health/")
steps <- read.csv("stepsData.csv")
head(steps)
plot(steps$stepsWalked)
plot(steps$stepsWalked, type="l")
library(lubridate)
head(steps)
class(steps$creationDate)
library(tidyr)
?mutate
library(dplyr)
head(steps)
steps %>% mutate(creationDate = as.Date(creationDate))
head(steps)
class(steps$stepsWalked)
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate))
head(steps)
steps <- steps %>%
mutate(creationDate = as_datetime(creationDate)) %>%
mutate(startDate = as_datetime(startDate)) %>%
mutate(endDate = as_datetime(endDate))
head(steps)
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as_datetime(creationDate)) %>%
mutate(startDate = as_datetime(startDate)) %>%
mutate(endDate = as_datetime(endDate))
head(steps)
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate))
steps
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked))
head(steps)
plot(steps$stepsWalked)
plot(steps$stepsWalked, type="l")
plot(stl(steps$stepsWalked), type="l")
?stl
nottem
plot(stl(steps$stepsWalked, "per"), type="l")
steps
nottem
plot(stl(nottem, "per"))
stepsWalked
steps$stepsWalked
steps
year(steps$startDate)
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked)) %>%
mutate(year = year(startDate))
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked)) %>%
mutate(year = year(startDate))
steps
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked)) %>%
mutate(year = year(startDate)) %>%
mutate(month = month(startDate)) %>%
mutate(day = day(startDate))
steps
nottem
class(notem)
class(nottem)
str(nottem)
library(zoo)
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked))
head(steps)
as.ts(steps)
?as.ts
as.ts(steps, freq="365")
library(xt)
library(xts)
?xts
xts(steps)
xts(steps, order.by = steps$startDate)
class(xts(steps, order.by = steps$startDate))
class(xts(steps, order.by = as.Date(steps$startDate))
)
xts(steps, order.by = as.Date(steps$startDate)
)
as.ts(steps)
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate))
as.ts(steps)
?as.ts
install(forecast)
install("forecast")
library(forecast)
data("AirPassengers")
AirPassengers
class(AirPassengers)
data(ausbeer)
data("ausbeer")
?ma
?stl
example(stl)
mdeaths
setwd("~/working/datasets/online_purchases/")
df <- read.csv("2019.csv")
head(df)
dim(df)
colnames(df)
df["Order.Date","Category","List.Price.Per.Unit", "Purchase.Price.Per.Unit","Quantity","Item.Subtotal","Item.Subtotal.Tax","Item.Total"]
df[,c("Order.Date","Category","List.Price.Per.Unit", "Purchase.Price.Per.Unit","Quantity","Item.Subtotal","Item.Subtotal.Tax","Item.Total")]
df <- df[,c("Order.Date","Category","List.Price.Per.Unit", "Purchase.Price.Per.Unit","Quantity","Item.Subtotal","Item.Subtotal.Tax","Item.Total")]
df <- df[,c("Order.Date","Shipment.Date","Category","List.Price.Per.Unit", "Purchase.Price.Per.Unit","Quantity","Item.Subtotal","Item.Subtotal.Tax","Item.Total")]
df <- read.csv("2019.csv")
df <- df[,c("Order.Date","Shipment.Date","Category","List.Price.Per.Unit", "Purchase.Price.Per.Unit","Quantity","Item.Subtotal","Item.Subtotal.Tax","Item.Total")]
df
head(df)
colnames(df) <- c("order_date"
,"shipment_date"
,"category"
,"list_price_per_unit"
,"purchase_price_per_unit"
,"quantity"
,"item_subtotal"
,"item_tax"
,"item_total")
df
write.csv(df, "purchases_2006-2019.csv")
write.csv(df, "purchases_2006-2019.csv", row.names = FALSE)
?write.csv
write.csv(df, "purchases_2006-2019.csv", row.names = FALSE, quote = FALSE)
ma(steps, order=52, centre = T)
steps
head(steps)
steps <- read.csv("stepsData.csv")
setwd("~/working/datasets/iphone_health/")
steps <- read.csv("stepsData.csv")
steps <- steps %>%
mutate(creationDate = as.Date(creationDate)) %>%
mutate(startDate = as.Date(startDate)) %>%
mutate(endDate = as.Date(endDate)) %>%
group_by(startDate) %>%
summarize(stepsWalked = sum(stepsWalked))
head(steps)
class(steps$startDate)
steps_ts <- ts(steps$stepsWalked, start = "2015-12-07", frequency = 365)
?ts
as.numeric(format(steps[1,1], "%j"))
steps[1,1]
as.numeric(format(steps[1,1], "%j"))
?format
lubridate::yday(steps[1,1])
steps[1,1]
lubridate::yday("2015-12-07")
lubridate::yday(as.character(steps[1,1]))
steps[1,1]
as.character(steps[1,1])
format(steps[1,1], "%X")
steps
steps[1,1]
steps$startDate[1]
lubridate::yday(steps$startDate[1])
steps_ts <- ts(steps$stepsWalked, start = c(2015,yday(steps$startDate[1])), frequency = 365)
steps_ts
yday(steps$startDate[1])
steps$startDate[1]
ma(steps_ts, order=52, centre = T)
AirPassengers
plot(steps_ts)
steps_trend <- ma(steps_ts, order=365, centre = T)
steps_trend
plot(steps_trend)
plot(steps_ts)
lines(steps_trend, col="red")
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
# detrend
steps_detrended_ts <- steps_ts / steps_trend
plot(steps_detrended_ts, main="step counts, detrended")
steps_trend <- ma(steps_ts, order=365, centre = F)
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
steps_detrended_ts <- steps_ts / steps_trend
plot(steps_detrended_ts, main="step counts, detrended")
steps_trend <- ma(steps_ts, order=7, centre = T)
# plot data with yearly trend overlaid
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
steps_detrended_ts <- steps_ts / steps_trend
plot(steps_detrended_ts, main="step counts, detrended")
# decompose into seasonal, trend and random
steps_stl <- stl(steps_ts, "periodic")
steps_stl
steps_stl_seasonal <- steps_stl$time.series[,1]
steps_stl_trend <- steps_stl$time.series[,2]
steps_stl_random <- steps_stl$time.series[,3]
plot(steps_stl_random)
plot(steps_stl_trend)
par(mfrow=c(3,1))
plot(steps_stl_seasonal)
plot(steps_stl_trend)
plot(steps_stl_random)
par(mfrow=c(3,1))
plot(steps_stl_seasonal, main="step count, seasonal component")
plot(steps_stl_trend, main="step count, trend component")
plot(steps_stl_random, main="step count, random component")
par(mfrow=c(3,1))
plot(steps_stl_seasonal, main="seasonal component")
plot(steps_stl_trend, main="trend component")
plot(steps_stl_random, main="random component")
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
par(mfrow=c(1,1))
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
steps_trend <- ma(steps_ts, order=365, centre = T)
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
steps_trend <- ma(steps_ts, order=12, centre = T)
# plot data with trend overlaid
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
steps_trend <- ma(steps_ts, order=52, centre = T)
# plot data with trend overlaid
plot(steps_ts, main="step counts")
lines(steps_trend, col="red")
?ma
plot(wineind)
sm <- ma(wineind,order=12)
lines(sm,col="red")
?stl
steps_ts
steps
steps[1401,]
?ts
biking <- read.csv("cyclingData.csv")
head(biking)
library(zoo)
read.csv.zoo("cyclingData.csv")
biking <- read.csv.zoo("cyclingData.csv")
biking
apply(biking, class, 1)
apply(biking, 1, class)
apply(biking, 2, class)
?read.zoo
biking <- read.zoo("cyclingData.csv")
?complete
df <- tibble(
group = c(1:2, 1),
item_id = c(1:2, 2),
item_name = c("a", "b", "b"),
value1 = 1:3,
value2 = 4:6
)
df
biking <- read.zoo("cyclingData.csv")
biking <- read.zoo("cyclingData.csv", header=T)
?read.zoo
biking <- read.csv.zoo("cyclingData.csv", header=T)
head(biking)
class(biking)
plot(biking$milesCycled)
plot(biking)
?read.csv.zoo
biking <- read.csv.zoo("cyclingData.csv", header=T, FUN=as.Date)
head(biking)
class(biking$startDate)
